name: Continuous Integration Workflow

on: [push]

jobs:
  deploy-runner:
    runs-on: ubuntu-latest
    steps:
      - uses: iterative/setup-cml@v1
      - uses: actions/checkout@v2
      - name: Deploy runner on EC2
        env:
          REPO_TOKEN: "${{ secrets.CML_DEGOULD_TOKEN_EXP_01DEC22 }}"
          AWS_ACCESS_KEY_ID: "${{ secrets.CML_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.CML_AWS_SECRET_ACCESS_KEY }}"
        run: |
          cml-runner \
          --cloud aws \
          --cloud-region eu-west \
          --cloud-type=g4dn.2xlarge \
          --cloud-aws-security-group="sg-0d5bae2034b49da0d" \
          --labels=cml-runner

  build-environment:
    timeout-minutes: 4320

    needs: deploy-runner

    runs-on: [self-hosted, cml-runner]

    container:
      image: docker://iterativeai/cml:0-dvc2-base1-gpu
      options: --gpus all

    env:
      SSH_URL: git+ssh://git@github.com/DeGould
      TOKEN_URL: git+https://"${{secrets.CML_DEGOULD_TOKEN_EXP_01DEC22}}"@github.com/DeGould
      PIP_CACHE: /github/home/.cache/pip # Unstable to encode hard paths
      DVC_CACHE: .dvc/cache
      DB_USER: "${{ secrets.DBUSER }}"
      DB_PASSWORD: "${{ secrets.DBPASSWORD }}"
      DB_PORT: "${{ secrets.DBPORT }}"
      DB_NAME: "${{ secrets.DBNAME }}"
      SERVER: "${{ secrets.SERVER }}"
      AWS_ACCESS_KEY_ID: "${{ secrets.CML_AWS_ACCESS_KEY_ID }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.CML_AWS_SECRET_ACCESS_KEY }}"
      PYTHONPATH: /__w/questionmaster/questionmaster # Unstable to encode paths
      REPO_TOKEN: "${{ secrets.CML_DEGOULD_TOKEN_EXP_01DEC22 }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Conda and activate environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: wheel-classifier
          environment-file: environment.yaml
          use-mamba: true

      - name: Set cache date
        run: echo "DATE=$(date + '%Y%m%d')" >> $GITHUB_ENV

      - name: Cache Conda dependencies
        uses: actions/cache@v2
        with:
          path: /usr/share/miniconda3/envs/wheel-classifier
          key: linux64-conda-${{ hashFiles('environment.yaml') }}-${{ env.DATE}}
        id: cache-conda

      - name: Export Poetry requirements to file, and inject secrets
        shell: bash -l {0}
        run: |
          poetry export -f requirements.txt --output requirements.txt --without-hashes --dev
          sed -i "s|$SSH_URL|$TOKEN_URL|g" requirements.txt

      - name: Install Python dependencies
        shell: bash -l {0}
        run: pip install -r requirements.txt
        if: steps.cache-pip.outputs.cache-hit != 'true'

      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_CACHE }}
          key: linux64-pip-${{ hashFiles('requirements.txt') }}-${{ env.DATE}}
        id: cache-pip

      - name: Run tests
        shell: bash -l {0}
        run: poetry run pytest

      - name: Run linter
        run: make lint
